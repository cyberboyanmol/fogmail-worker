generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRESQL_DB_URL")
}

model EmailInbox {
    id            String         @id @default(uuid())
    username      String         @unique
    conversations Conversation[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt

    @@index([username])
}

model Conversation {
    id           String     @id @default(uuid())
    emailInbox   EmailInbox @relation(fields: [emailInboxId], references: [id])
    emailInboxId String
    threadId     String?
    numMessages  Int        @default(0)
    numUnread    Int        @default(0)
    subject      String
    senders      Address[]  @relation("ConversationSenders")
    recipients   Address[]  @relation("ConversationRecipients")
    messages     Message[]
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    @@index([emailInboxId])
    @@index([threadId])
    @@index([subject])
}

model Message {
    id             String        @id @default(uuid())
    conversation   Conversation  @relation(fields: [conversationId], references: [id])
    conversationId String
    messageId      String        @unique
    fromAddress    Address       @relation("MessageFrom", fields: [fromAddressId], references: [id])
    fromAddressId  String
    subject        String
    rawMail        String
    size           Int
    headers        Json
    text           String?
    textAsHtml     String?
    html           String?
    inReplyTo      String?
    references     String[]
    date           DateTime
    status         MessageStatus @default(UNREAD)
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt

    ccList      Address[]    @relation("MessageCC")
    bccList     Address[]    @relation("MessageBCC")
    toList      Address[]    @relation("MessageTo")
    attachments Attachment[]
    Header      Header[]

    @@index([conversationId, date])
    @@index([messageId])
    @@index([fromAddressId])
}

model Address {
    id        String   @id @default(uuid())
    name      String   @default("")
    address   String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    senderConversations    Conversation[] @relation("ConversationSenders")
    recipientConversations Conversation[] @relation("ConversationRecipients")
    fromMessages           Message[]      @relation("MessageFrom")
    ccMessages             Message[]      @relation("MessageCC")
    bccMessages            Message[]      @relation("MessageBCC")
    toMessages             Message[]      @relation("MessageTo")

    @@index([address])
}

model Attachment {
    id                 String   @id @default(uuid())
    message            Message  @relation(fields: [messageId], references: [id])
    messageId          String
    contentType        String
    contentDisposition String
    fileName           String
    cid                String?
    checksum           String
    size               Int
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt

    @@index([messageId])
}

model Header {
    id        String  @id @default(uuid())
    key       String
    value     String
    Message   Message @relation(fields: [messageId], references: [id])
    messageId String

    @@index([messageId])
}

enum MessageStatus {
    READ
    UNREAD
    ARCHIVED
}
